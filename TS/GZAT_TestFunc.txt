
{ the code will make use of classes in these namespaces }
using elsystem ;
using tsdata.trading ;
using elsystem.windows.forms ;
using elsystem.drawing ;

inputs:
	string AccountNumber( "21055300" ), 
	string SymbolToTrade( "SMU12" ),
	int SizeOfEachOrder( 1 ), 
	double EntryPriceOffset( 0.5 ), 
	bool LiquidateAtSessionClose( true ) ; 

variables:	
	AccountsProvider AccountsInfo( NULL ),
	PositionsProvider PositionInfo( NULL ),
	OrdersProvider FilledOrdersInfo( NULL ),
	intrabarpersist bool AlgoRunning( false ),
	intrabarpersist bool PositionNotComplete( false ),
	intrabarpersist double TimerInterval( 0 ),
	intrabarpersist bool TimerElapsed( false ), 	
	OrderTicket EntryBuyTicket( NULL ),
	ReplaceTicket ReplaceMktOrderTkt( NULL ),
	Order EntryOrder( NULL ),
	Timer tmrOrderTimer( NULL ),
	Timer tmrLabelUpdateTimer( NULL ),
	DateTime OrderConversionTime( NULL ) ;
		
{ Init method is called when indicator is initialized;  all necessary DataProviders
and OrderTickets are created so that they can be used in the event that user starts
the algo running }
method void Init( ) 
	begin
	{SymbolToTrade = Symbol ;}
	CreateAccountsProvider() ; 
	CreatePositionsProvider() ;
	CreateOrdersProvider() ;
	CreateOrderTickets();
	{CheckPosition();}
	end ;

{-----------------------------------------}
method void ApplyConfigSettings()
	begin

	end ;

{-----------------------------------------}	
Method bool CheckDate() {YYYMMDD: 2012-1900 MMDD}
Variable: bool is_date;
	begin
		Print("Check date:", Date, ", DayOfWeek:", Dayofweek(Date));
		if Date < 1120930 and Date > 1120805 and Dayofweek(Date) > 1 and Dayofweek(Date) < 5 then
			is_date = True 
		else 
			is_date = False ;
		Return is_date ;
	end;

{-----------------------------------------}	
Method bool CheckTime() {YYYMMDD: 2012-1900 MMDD}
Variable: bool is_time;
	begin
		Print("Check time:", Currenttime);
		if Currenttime < 1330 and Currenttime > 925 then
			is_time = True 
		else 
			is_time = False ;
		Return is_time ;
	end;

{ method to handle creation and re-starting of order timer and label update timer }
method void RestartTimers()
	begin	
	
	if tmrOrderTimer = NULL then
		begin
	 	tmrOrderTimer = new Timer ;
		tmrOrderTimer.Elapsed += OrderTimer_Elapsed ;
		tmrOrderTimer.AutoReset = false ;
		end	;
	{
	if tmrLabelUpdateTimer = NULL then
		begin
	 	tmrLabelUpdateTimer = new Timer ;
	 	tmrLabelUpdateTimer.Interval = 500 ; { 500 ms update timer }
		tmrLabelUpdateTimer.Elapsed += LabelUpdateTimer_Elapsed ;
		tmrLabelUpdateTimer.AutoReset = true ;
		end	;}
	
	tmrOrderTimer.Enable = false ;
	tmrOrderTimer.Interval = TimerInterval ;
	
	OrderConversionTime = DateTime.Now + TimeSpan.Create( 0, 0, TimerInterval *
	 0.001 ) ;
		
	tmrOrderTimer.Enable = true ;
	TimerElapsed = false ;
	tmrLabelUpdateTimer.Enable = true ;
	
	end ;

{-----------------------------------------}	
method void CreateAccountsProvider()
	begin
	{ retrieve information on user's accounts, so that account numbers can be used
	 to populate the accounts ComboBox }
	 Print("CreateAccountsProvider");
	AccountsInfo = new AccountsProvider ;
	AccountsInfo.Realtime = false ;
	AccountsInfo.Load = true ;
	end ;
	
{ PositionsProvider will be used to track the quantity of shares in the account }
method void CreatePositionsProvider()
	begin
	Print("CreatePositionsProvider");
	PositionInfo = new PositionsProvider ;
	PositionInfo.Symbols += SymbolToTrade ;
	PositionInfo.Accounts += AccountNumber;
	PositionInfo.Types += "any" ;
	PositionInfo.Realtime = true ;
	{PositionInfo.Updated += PositionInfo_Updated ;}
	PositionInfo.Load = true ;
	end ;
	
{ OrdersProvider will be used to track filled orders, particularly filled orders
 that result from converting unfilled limit orders to market orders }
method void CreateOrdersProvider()
	begin
	Print("CreateOrdersProvider");
	FilledOrdersInfo = new OrdersProvider ;
	FilledOrdersInfo.Accounts += AccountNumber ;
	FilledOrdersInfo.Symbols += SymbolToTrade ;
	FilledOrdersInfo.States += "filled" ;
	FilledOrdersInfo.Realtime = true ;
	{FilledOrdersInfo.Updated += FilledOrders_Updated ;}
	FilledOrdersInfo.Load = true ;
	end	;

{-----------------------------------------}
method void CreateOrderTickets()
	begin
	
	EntryBuyTicket = new OrderTicket ;
	EntryBuyTicket.Symbol = SymbolToTrade ;
	EntryBuyTicket.Account = AccountNumber ;
	EntryBuyTicket.SymbolType = Category ;
	EntryBuyTicket.Action = OrderAction.Buy ;
	EntryBuyTicket.Duration = "day" ;
	EntryBuyTicket.Type = OrderType.Limit ;
	
	{ create the market order ReplaceTicket that will be used if the limit order
	 ticket is not filled within the allotted time }
	ReplaceMktOrderTkt = new ReplaceTicket ;
	ReplaceMktOrderTkt.Type = OrderType.Market ;

	end ;
		
{ check current position size against the size of the desired position in order to
determine whether algo should continue to run }
method void CheckPosition()
variables:  int Count, string SymbolToTrade ;
	begin
		Print("Is date OK:" , CheckDate());
		Print("Is time OK:", CheckTime());
		Print("CheckPosition: ", Currenttime, ", Currentbar:", Currentbar, ", Symbol:", Symbol);
		if (PositionInfo.Count > 0) then
		begin			
			Print("Qty", PositionInfo.Position[0].Quantity);
			Print("Mkt Value", PositionInfo.Position[0].MarketValue);	
			Print("P/L", PositionInfo.Position[0].OpenPL);  			
		end;
		
	end ;

{-----------------------------------------}
method void IssueNextOrder()
variables:	int SharesRemainingToBuy ;
	begin

	if PositionInfo.Count > 0 then
		SharesRemainingToBuy = PositionInfo[0].Quantity;
		
	EntryBuyTicket.Quantity = SizeOfEachOrder ;
	EntryBuyTicket.LimitPrice = Close - EntryPriceOffset ;
				
	if EntryBuyTicket.Quantity > 0 then
		begin
		EntryOrder = EntryBuyTicket.Send() ;
		if EntryOrder <> NULL then
			begin			
			RestartTimers() ;
			end
		else
			RestartTimers() ;{lblEnableOrdPlacemnt.ForeColor = Color.Magenta ;}
		end	;	
	
	end	;

{-----------------------------------------}	
method void CancelOpenOrder()
	begin

	if EntryOrder <> NULL then
		begin
		if EntryOrder.CanCancel() then
			EntryOrder.Cancel() ;
		end	;
		
	end ;

{ stop algo and perform clean-up }
method void StopAlgo()
	begin

	if tmrOrderTimer <> NULL then
		tmrOrderTimer.Enable = false ;
	{	
	if tmrLabelUpdateTimer <> NULL then
		tmrLabelUpdateTimer.Enable = false ;

	lblTimeToNextOrder.Visible = false ;}
	CancelOpenOrder() ;
	AlgoRunning = false ;

	end ;
	
{ convert open limit order to market when limit order timer elapses }
method void OrderTimer_Elapsed( Object TmrSender, TimerElapsedEventArgs TmrArgs )
	begin
	
	{ if the limit order is not completely filled when the timer elapses, replace
	 the limit order with a market order;  if the limit order has been filled when
	 the timer elapses, place a new limit order if the position is not yet
	 complete }
	TimerElapsed = true ;
	if EntryOrder.LeftQuantity <> 0 and EntryOrder.State = OrderState.Received then
		begin
		ReplaceMktOrderTkt.Quantity = EntryOrder.LeftQuantity ;
		EntryOrder.Replace( ReplaceMktOrderTkt ) ;
		end
	else if EntryOrder.LeftQuantity = 0 and EntryOrder.State = OrderState.Filled then
		begin
		CheckPosition() ;
		if AlgoRunning and PositionNotComplete then
			IssueNextOrder()
		else
			StopAlgo() ;
		end
	{ else timer may have elapsed before order was received so, if order is in
	 sending or sent state, restart timers }
	else { if EntryOrder.State = OrderState.Sending or EntryOrder.State =
	 OrderState.Sent then }
		begin 
		CheckPosition() ;
		if AlgoRunning and PositionNotComplete then
			RestartTimers()
		else
			StopAlgo() ;
		end	;	

	end ;
	
{ after a limit order is converted to a market order and filled, check the position
and, if necessary, place a new limit order }
method void FilledOrders_Updated( Object OrdProvSender, OrderUpdatedEventArgs
 OrdProvUpdateArgs ) 
	begin

	if EntryOrder <> NULL then
		begin
		if OrdProvUpdateArgs.Order = EntryOrder and ( OrdProvUpdateArgs.Order.Type =
		 OrderType.Market or ( OrdProvUpdateArgs.Order.Type = OrderType.Limit and
		 TimerElapsed ) ) then
	 		begin
			CheckPosition() ;
			if AlgoRunning and PositionNotComplete then
				IssueNextOrder()
			else
				StopAlgo() ;
			end	;
		end ;
		
	end ;
{-----------------------------------------}		
	Once(Currentbar = 1)
		Begin
		Print("Time init:", Currenttime);
		Init();
		End;
	if LastBarOnChart then
		Begin
			CheckPosition();
		End;