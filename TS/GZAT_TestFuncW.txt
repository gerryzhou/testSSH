{Trade Strategy:
[Entry at reversal]
Exit strategy: bars since entry expired without profits expected 
or TLAngMA change to the value expected;
??How to detect wick/hammer ??
[Trade range]
[Trend follow]
if slow TLAngMA > 10 or < -10, trend follow entry at correction
tracking fast TLAngMA if cross 0 or less than 5, then entry at the turning point;
track the bar number since entry, if > 10 bars no profits, exit;
track the fast TLAngMA if > 45 or <-45 which means speed up, exit at the turning point;
else wait for the target hit


[Entry at breakout]
}
using elsystem ;
using tsdata.common ;
using tsdata.trading ;
using tsdata.marketdata ;

[IntrabarOrderGeneration = FALSE]

inputs:
	{string AccountNum( "21055300" ),  the account number to be used for
	 trading }
	int TradeSize( 1 ), { the size of the position, in number of contracts or
	 shares, that is to be entered and exited }
	int TradingMode( 0 ), {1=LongOnly, -1=ShortOnly, 0=LongShortBoth}
	double EntryOffsetTicksFromLastTrade( 3 ), { the amount to offset the two entry
	 orders from the price of the first trade that follows setting the Start input
	 to true }
	double ProfitTargetOffsetTicks( 5 ), { the amount by which to offset the profit
	 target order from the average entry price }
	double ProfitTargetLeastOffsetTicks( 2 ), { the least dollar amount of profit ticks 
	by which to keep the position open, otherwise, try to close it ASAP }
	double StopLossOffsetTicks( 20 ), { the amount by which to offset the stop-loss
	 order from the average entry price }
	double FloorAmt( 0.2 ),
	Price( Close ),
	double ResistanceST(HighD(1)),
	double SupportST(LowD(1)),
	double ResistanceMT(HighD(1)),
	double SupportMT(LowD(1)),
	double ResistanceLT(HighD(1)),
	double SupportLT(LowD(1)),
	NormRatio(2),
	int FastLength( 4 ),
	int SlowLength( 30 ),
	int TLLength( 4 ),
	double ExtremeBullTLAng(40),
	double ExtremeBearTLAng(-40),
	double RegularBullTLAng(20),
	double RegularBearTLAng(-20),
	int MaxBarsSinceEntry(6),
	int MaxMinsSinceEntry(3),
	int MaxBarsWaitForEntry(6),
	int MaxMinsWaitForEntry(3),
	int YYYMMDD_Start(1120420) ,
	int YYYMMDD_End( 1121230 ),
	int Weekday_Start( 1 ) ,
	int Weekday_End( 5 ),
	int Timespan_Start( 600 ) ,
	int Timespan_End( 1859 ) ,
	int Entry_Strategy( -1 ),
	bool LiquidateAtSessionClose( true ) ; 

consts:	
	{Position and Order status}
	int PosFlatNoOrder(1),
	int PosFlatEnOrder(2),
	int PosLongNoOrder(3),
	int PosLongExOrder(4),
	int PosShortNoOrder(5),
	int PosShortExOrder(6),
	int PosOrderConflict(7),
	int PosOrderUnknown(-1),
	{Bull Bear status}
	int ExtremeBullish(1),
	int Bullish(2),
	int Bull2Bear(3),
	int Bear2Bull(4),
	int Bearish(5),
	int ExtremeBearish(6),
	int NoBullNoBear(-1),
	{Buy Sell Signal}
	int BuySignal(1),
	int SellSignal(-1),
	int NoBuySellSignal(0),
	{Trading Mode}
	int LongOnly(1),
	int ShortOnly(-1),
	int BothLongShort(0),
	{Entry strategy}
	int BuyReversal(1),
	int BuyCorrection(2),
	int BuyBreakout(3),
	int ShortReversal(-1),
	int ShortCorrection(-2),
	int ShortBreakout(-3),
	int LongShortBySignal(0); {Range trading}

variables:	
	OrderTicket EntryBuyStopTicket( NULL ),
	OrderTicket EntryShortStopTicket( NULL ),
	OrderTicket EntryBuyLmtTicket( NULL ),
	OrderTicket EntryShortLmtTicket( NULL ),
	BracketOrderTicket LongExitBracket( NULL ),
	BracketOrderTicket ShortExitBracket( NULL ),
	OCOOrderTicket EntryOCOTicket( NULL ),
	ReplaceTicket ReplaceLmtTicket (NULL),
	ReplaceTicket ReplaceMktTicket (NULL),
	Order LongEntryOrder( NULL ),
	Order ShortEntryOrder( NULL ),
	Order LongExitOrderSide1( NULL ),
	Order LongExitOrderSide2( NULL ),
	Order ShortExitOrderSide1( NULL ),
	Order ShortExitOrderSide2( NULL ),
	AccountsProvider AccountInfo( Null ),
	QuotesProvider QuoteInfo( Null ),
	PositionsProvider PositionInfo( NULL ),
	Account myAccount ( NUll ),	
	string AccountToTrade ( " " ),
	OrdersProvider OrdersInfo( NULL ),
	{int BarSinceEntryCounter(MaxBarsSinceEntry),
	int BarWait4EntryCounter(MaxBarsWaitForEntry),
	int MinsWait4EntryFilled(MaxMinsWaitForEntry),}
	double CurFastTLAngMA( 0 ),
	double CurSlowTLAngMA( 0 ),
	double MinFastTLAngMA( 0 ),
	double MaxFastTLAngMA( 0 ), 
	double MinSlowTLAngMA( 0 ),
	double MaxSlowTLAngMA( 0 ), 
	OneTick(MinMove / PriceScale), {OneTickValue(iff(GetExchangeName="FOREX", MinMove/PriceScale*BigPointValue*100000, MinMove/PriceScale*BigPointValue))}
	OneTickValue(Pointvalue*Minmove), {The dollar amount for one tick}
	int BullBearStatus(NoBullNoBear),
	int TradingStatus(PosOrderUnknown) ;

method void Init( ) 
	begin
	If AccountInfo = Null then
		Begin
			AccountInfo = AccountsProvider.Create() ; 
			AccountInfo.Realtime = True ;
			AccountInfo.Load = True ;
			AccountInfo.Updated += AccountInfoUpdated ;				
		End ;
	AccountToTrade = Getaccountid ;
	{SymbolToTrade = Symbol ;}
	{Print("Point=", Numtostr(Point, 5));}
	Print("--", Symbol, "--MinMove=", MinMove, ", PriceScale=", Pricescale, ", PointValue=", PointValue, ", BigPointValue=", Bigpointvalue, ", Tick=", OneTick );
	Print("AccountToTrade=", AccountToTrade, ", GetRTPurchingPower=", Getrtpurchasingpower(GetAccountID), ", Getrtinitialmargin=", Getrtinitialmargin(GetAccountID), ", Getrtmarginrequirement=", Getrtmarginrequirement(GetAccountID));
	Value2 = MinutesDiff(Currenttime, 202) ;
	print("MinutesDiff(Currenttime)=", Value2) ;
	{BarSinceEntryCounter = MaxBarsSinceEntry ;}
	If QuoteInfo = Null then
		Begin
			QuoteInfo = QuotesProvider.Create() ;
			QuoteInfo.Symbol = Symbol ;
			QuoteInfo.Fields += "MinMove" ;
			QuoteInfo.Fields += "Margin" ;
			QuoteInfo.Realtime = True ;
			QuoteInfo.Load = True ;			
		End ;
	Print("Quote Margin=", getDecimals(QuoteInfo.Quote["Margin"].DoubleValue, 4), "MinMove=", getDecimals(QuoteInfo.Quote["MinMove"].DoubleValue, 5)) ;
			
	// Long Entry Stop OrderTicket - EntryBuyStopTicket
	If EntryBuyStopTicket = NULL then
		Begin 
			EntryBuyStopTicket = OrderTicket.Create() ;
			EntryBuyStopTicket.Symbol = Symbol ;
			EntryBuyStopTicket.SymbolType = Category ;
			EntryBuyStopTicket.Account = AccountToTrade ;
			EntryBuyStopTicket.Quantity = TradeSize ;
			EntryBuyStopTicket.Action = OrderAction.buy ;
			EntryBuyStopTicket.Type = OrderType.stopmarket ;
			EntryBuyStopTicket.StopPrice = Last + OneTick*EntryOffsetTicksFromLastTrade ;
		End ;
	
	// Short Entry Stop OrderTicket - EntryShortStopTicket
	If EntryShortStopTicket = NULL then
		Begin 
			EntryShortStopTicket = OrderTicket.Create() ;
			EntryShortStopTicket.Symbol = Symbol ;
			EntryShortStopTicket.SymbolType = Category ;
			EntryShortStopTicket.Account = AccountToTrade ;
			EntryShortStopTicket.Quantity = TradeSize ;
			EntryShortStopTicket.Action = OrderAction.sellshort ;
			EntryShortStopTicket.Type = OrderType.stopmarket ;
			EntryShortStopTicket.StopPrice = Last - OneTick*EntryOffsetTicksFromLastTrade ;
		End ;


	// Long Entry Limit OrderTicket
	If EntryBuyLmtTicket = NULL then
		Begin 
			EntryBuyLmtTicket = OrderTicket.Create() ;
			EntryBuyLmtTicket.Symbol = Symbol ;
			EntryBuyLmtTicket.SymbolType = Category ;
			EntryBuyLmtTicket.Account = AccountToTrade ;
			EntryBuyLmtTicket.Quantity = TradeSize ;
			EntryBuyLmtTicket.Action = OrderAction.buy ;
			EntryBuyLmtTicket.Type = OrderType.limit ;
			EntryBuyLmtTicket.StopPrice = Last + OneTick*EntryOffsetTicksFromLastTrade ;
		End ;

	
	// Short Entry Limit OrderTicket 
	If EntryShortLmtTicket = NULL then
		Begin 
			EntryShortLmtTicket = OrderTicket.Create() ;
			EntryShortLmtTicket.Symbol = Symbol ;
			EntryShortLmtTicket.SymbolType = Category ;
			EntryShortLmtTicket.Account = AccountToTrade ;
			EntryShortLmtTicket.Quantity = TradeSize ;
			EntryShortLmtTicket.Action = OrderAction.sellshort ;
			EntryShortLmtTicket.Type = OrderType.limit ;
			EntryShortLmtTicket.StopPrice = Last - OneTick*EntryOffsetTicksFromLastTrade ;			
		End ;

	
	// LongExitBracket - Profit Target and Stop Loss
	If LongExitBracket = NULL then
		Begin 
			LongExitBracket = BracketOrderTicket.Create() ;
			LongExitBracket.Symbol = Symbol ;
			LongExitBracket.SymbolType = Category ;
			LongExitBracket.Account = AccountToTrade ;
			LongExitBracket.Quantity = TradeSize ;
			LongExitBracket.Action = OrderAction.sell ;
			LongExitBracket.TargetType = OrderType.limit ;
			LongExitBracket.ProtectionType = OrderType.stopmarket ;			
		End ;


	// ShortExitBracket - Profit Target and Stop Loss
	If ShortExitBracket = NULL then
		Begin 
			ShortExitBracket = BracketOrderTicket.Create() ;
			ShortExitBracket.Symbol = Symbol ;
			ShortExitBracket.SymbolType = Category ;
			ShortExitBracket.Account = AccountToTrade ;
			ShortExitBracket.Quantity = TradeSize ;
			ShortExitBracket.Action = OrderAction.BuyToCover ;
			ShortExitBracket.TargetType = OrderType.Limit ;
			ShortExitBracket.ProtectionType = OrderType.StopMarket ;			
		End ;


	// Entry OCO ticket - Short Entry and Long Entry
	If EntryOCOTicket = NULL then
		Begin 
			EntryOCOTicket = OCOOrderTicket.Create() ;
			EntryOCOTicket.Siblings.Add( EntryBuyStopTicket ) ;
			EntryOCOTicket.Siblings.Add( EntryShortStopTicket ) ;			
		End ;
	
	// Positions Provider
	If PositionInfo = NULL then
		Begin 
			PositionInfo = PositionsProvider.Create() ;
			PositionInfo.Accounts += AccountToTrade ;
			PositionInfo.Symbols += Symbol ;
			PositionInfo.Realtime = true ;
			PositionInfo.Updated += PositionUpdate ;
			PositionInfo.Load = true ;			
		End ;
		
	// Orders Provider
	If OrdersInfo = NULL then
		Begin 
			OrdersInfo = OrdersProvider.Create() ;
			OrdersInfo.Accounts += AccountToTrade ;
			OrdersInfo.Symbols += Symbol ;
			OrdersInfo.States += "cancelpending, partiallyfilled, received, sending, sent" ;
			OrdersInfo.Realtime = true ;
			OrdersInfo.Updated += OrderUpdate ;
			OrdersInfo.Load = true ;			
		End ;
	
	Print("Init.....--", Symbol, "----Time update:", Currenttime, "---------") ;
	
	End ; {End init()}

	
Method void InitLastBarOnChart()
	begin
		{BarWait4EntryCounter -= 1 ;
		BarSinceEntryCounter -= 1 ;}
		Print("Init LastBar on Chart--", Symbol, "--, CurFastTLAngMA=", CurFastTLAngMA, "------Time update:", Currenttime, "---------") ;
		
		BullBearStatus = CheckBullBearStatus() ;
		TradingStatus = CheckTradingStatus() ;		
	end;

{Var: Symbol_Decimals ( Decimals( MinMove / PriceScale, 10 ) ) ;}
Method int getDecimals(double prc, int Max_Decimals) 
VARIABLES: string Decimal_String ;
	Begin
		Decimal_String = NumToStr( FracPortion( prc ), Max_Decimals ) ;
		While RightStr( Decimal_String, 1 ) = "0" begin 
			Decimal_String = LeftStr( Decimal_String, StrLen( Decimal_String ) - 1 ) ;
		end ;

		return StrLen(Decimal_String) -2 ;	// subtract 2 for decimals	
	End ;

{-----------------------Event Handlers---------------------------}
	
{ method void LongEntryUpdated: event handler for long entry order update events }
method void LongEntryUpdated( Object EntryOCOOrder, OrderUpdatedEventArgs
 EntryOCOUpdateArgs ) 
	begin
		{ set properties of long exit bracket and issue it }
		If LongEntryOrder.State = OrderState.Filled then
			begin
				LongExitBracket.LimitPrice = LongEntryOrder.AvgFilledPrice + OneTick*ProfitTargetOffsetTicks ;
				LongExitBracket.StopPrice = LongEntryOrder.AvgFilledPrice - OneTick*StopLossOffsetTicks ;
				LongExitOrderSide1 = LongExitBracket.Send() ;
				LongExitOrderSide2 = LongExitOrderSide1.NextSibling ;
				LongExitOrderSide1.Updated += ExitOrderUpdate ;
				LongExitOrderSide2.Updated += ExitOrderUpdate ;
				{BarSinceEntryCounter = MaxBarsSinceEntry ;}
				Print("LongEntryUpdated--", Symbol, "--Order filled, LongExitBracket Input(", LongExitBracket.LimitPrice, " , ",  LongExitBracket.StopPrice, ")");
			end
		Else if LongEntryOrder.State = OrderState.received then
			Begin 
				{BarWait4EntryCounter = MaxBarsWaitForEntry ;}
				Print("LongEntryUpdated--", Symbol, "--Order received, Time=", LongEntryOrder.EnteredTime.ELTime);
			End ;
	end ;

{ method void ShortEntryUpdated: event handler for short entry order update events }
method void ShortEntryUpdated( Object EntryOCOOrder, OrderUpdatedEventArgs
 EntryOCOUpdateArgs ) 
	begin
		{ Set properties of short exit bracket and issue it }
		if ShortEntryOrder.State = OrderState.Filled then
			begin
				ShortExitBracket.LimitPrice = ShortEntryOrder.AvgFilledPrice -
		 		OneTick*ProfitTargetOffsetTicks ;
				ShortExitBracket.StopPrice = ShortEntryOrder.AvgFilledPrice + OneTick*StopLossOffsetTicks ;
				ShortExitOrderSide1 = ShortExitBracket.Send() ;
				ShortExitOrderSide2 = ShortExitOrderSide1.NextSibling ;
				ShortExitOrderSide1.Updated += ExitOrderUpdate ;
				ShortExitOrderSide2.Updated += ExitOrderUpdate ;
				{BarSinceEntryCounter = MaxBarsSinceEntry ;}
				Print("ShortEntryUpdated--", Symbol, "--Order filled, ShortExitBracket Input(", ShortExitBracket.LimitPrice, " , ",  ShortExitBracket.StopPrice, ")");
			end 
		Else if ShortEntryOrder.State = OrderState.received then
			Begin 
				{BarWait4EntryCounter = MaxBarsWaitForEntry ;}
				Print("ShortEntryUpdated--", Symbol, "--Order received, Time=", ShortEntryOrder.EnteredTime.ELTime);
			End ;
	end ;

{ method void ExitOrderUpdate: when an exit order update event occurs, update plots }
method void ExitOrderUpdate( Object ExitOrder, OrderUpdatedEventArgs
 ExitUpdateArgs )
	begin
		If LastBarOnChart and ExitUpdateArgs.Reason = OrderUpdateReason.statechanged then
			Print("ExitOrderUpdate--", Symbol, "--", ExitUpdateArgs.State.ToString(), ", ", ExitUpdateArgs.Message) ;
	end ;

method void AccountInfoUpdated (elsystem.Object sender, tsdata.trading.AccountUpdatedEventArgs args )
variables: 
tsdata.trading.Account myAccount, 	{ object variable used to access the values for each Account }
double AcctValue, 					{ used to accumulate the total real-time net worth of all accounts }
int Counter;
	Begin 
		Once If (AccountInfo.Count > 0) then
			begin
				print(AccountInfo.Count, " accounts detected....");
				AcctValue = 0;
				For Counter=0 to AccountInfo.Count-1 
					{ reads each Account object and adds the real-time value to the total }
				begin
					myAccount = AccountInfo[Counter] ;
					AcctValue = AcctValue + myAccount.RTAccountNetWorth;
					if myAccount.Type = AccountType.futures then
						Begin 
							AccountToTrade = myAccount.AccountID.ToString() ;
							Print(myAccount.Type.ToString()," Accts"); 
							Print(myAccount.RTAccountNetWorth,"=TotalValue");
							Print(myAccount.RTPurchasingPower.ToString()," =RTPurchasingPower "); 
						End ;
				end;
					{ displays the number of accounts and their total value }
				Print(AcctValue,"=TotalValue");
			end
		else
			begin
				print("No accounts detected....");
				{ display an error message if no accounts are found }
				throw elsystem.Exception.Create("No accounts available");
			end;		
	End ;
	
{ method void PositionUpdate: when a position update occurs, update plots }
method void PositionUpdate( Object PosProvide, PositionUpdatedEventArgs
 PosUpdateArgs )
	begin
		{If LastBarOnChart then
			Print("PositionUpdate, Position.Quantity=", CheckPosition()) ;}
	end ;

{ method void OrderUpdate: when an order update occurs, update plots }
method void OrderUpdate( Object OrdProvide, OrderUpdatedEventArgs
 OrdUpdateArgs )
	begin
		If LastBarOnChart and 
			(OrdUpdateArgs.Reason = OrderUpdateReason.added or OrdUpdateArgs.Reason = OrderUpdateReason.removed) then
			Print("OrderUpdate--", Symbol, "--", OrdUpdateArgs.State.ToString(), ", ", OrdUpdateArgs.Message) ;
	end ;


{-----------------------Indicators and signals---------------------------}
{
{Bull Bear status}
	int ExtremeBullish(1),
	int Bullish(2),
	int Bull2Bear(3),
	int Bear2Bull(4),
	int Bearish(5),
	int ExtremeBearish(6),
	int NoBullNoBear(-1),
}
Method int CheckBullBearStatus()
	begin		
		if CurFastTLAngMA > 0 and CurFastTLAngMA > MaxFastTLAngMA then
			MaxFastTLAngMA = CurFastTLAngMA 
		else if CurFastTLAngMA < 0 and CurFastTLAngMA < MinFastTLAngMA then
			MinFastTLAngMA = CurFastTLAngMA ;
			
		If CurFastTLAngMA > 0 then
			Begin
				If CurFastTLAngMA > ExtremeBullTLAng then
					Begin
						If High > ResistanceST then
							Return ExtremeBullish 
						Else Return Bullish ;
					End
				Else if CurFastTLAngMA cross above CurFastTLAngMA[1] then
					Return Bear2Bull ;				
			End
		else if CurFastTLAngMA < 0 then
			Begin
				If CurFastTLAngMA < ExtremeBearTLAng then
					Begin
						If Low < SupportST then
							Return ExtremeBearish 
						Else Return Bearish ;
					End
				Else if CurFastTLAngMA cross below CurFastTLAngMA[1] then
					Return Bull2Bear ;		
			End;
			
		Return NoBullNoBear ;
	end;

{
{Bull Bear status}
	int ExtremeBullish(1),
	int Bullish(2),
	int Bull2Bear(3),
	int Bear2Bull(4),
	int Bearish(5),
	int ExtremeBearish(6),
	int NoBullNoBear(-1),
	{Buy Sell Signal}
	int BuySignal(1),
	int SellSignal(2),
	int NoBuySellSignal(-1),
}
Method int CheckEntrySignal()
Variables: int Long_Entry_Strategy, int Short_Entry_Strategy;
	begin
		switch(Entry_Strategy)
			Begin
				Case BuyReversal, BuyCorrection, BuyBreakout :
					if BullBearStatus[1] = ExtremeBearish and CurFastTLAngMA > MinFastTLAngMA[1] then
						Return BuySignal ;				
				Case ShortReversal, ShortCorrection, ShortBreakout : 
					if BullBearStatus[1] = ExtremeBullish and CurFastTLAngMA < MaxFastTLAngMA[1] then
						Return SellSignal ;				
				Default : {LongShortBySignal}
					if BullBearStatus[1] = ExtremeBullish and CurFastTLAngMA < MaxFastTLAngMA[1] then
						Return SellSignal 
					Else if BullBearStatus[1] = ExtremeBearish and CurFastTLAngMA > MinFastTLAngMA[1] then
						Return BuySignal ;
			End ;
		
		Return NoBuySellSignal ;
	end;

Method int CheckExitLongSignal()
Variables: int Long_Entry_Strategy, int Short_Entry_Strategy;
	begin
		switch(Entry_Strategy)
			Begin
				Case BuyReversal, BuyCorrection, BuyBreakout, LongShortBySignal :
					If getExitLongWithLimitLife() > MaxMinsSinceEntry Then
						Begin
							if BullBearStatus[1] = ExtremeBullish and CurFastTLAngMA < MaxFastTLAngMA[1] then
								Return SellSignal 
							else if CurFastTLAngMA < RegularBullTLAng And CheckPosOpenPL() <= ProfitTargetLeastOffsetTicks*OneTickValue then
								Return SellSignal ;
						End;					
			End ;
		
		Return NoBuySellSignal ;
	end;

Method int CheckExitShortSignal()
Variables: int Long_Entry_Strategy, int Short_Entry_Strategy;
	begin
		switch(Entry_Strategy)
			Begin
				Case ShortReversal, ShortCorrection, ShortBreakout, LongShortBySignal : 
					If getExitShortWithLimitLife() > MaxMinsSinceEntry Then
						Begin
							if BullBearStatus[1] = ExtremeBearish and CurFastTLAngMA > MinFastTLAngMA[1] then
								Return BuySignal 
							else if CurFastTLAngMA > RegularBearTLAng And CheckPosOpenPL() <= ProfitTargetLeastOffsetTicks*OneTickValue then
								Return BuySignal ;
						End;
			End ;
		
		Return NoBuySellSignal ;
	end;
				
Method bool CheckLiquidateSignal()
	begin
		if CheckPosition() > 0 then
			Begin
				if CurFastTLAngMA < 0 and getExitLongWithLimitLife() > MaxMinsSinceEntry then
					Return true;
			End
		Else if CheckPosition() < 0 then
			Begin
				if CurFastTLAngMA > 0 and getExitShortWithLimitLife() > MaxMinsSinceEntry then
					Return true;
			end;
			
		Return false ;
	end;

{-----------------------Positions---------------------------}
Method int CheckPosition() 
	begin
		
		If PositionInfo <> Null and PositionInfo.Count > 0 and PositionInfo.Position[Symbol,AccountToTrade] <> Null then
			Return PositionInfo.Position[Symbol,AccountToTrade].Quantity {PositionInfo[0].Quantity }
		Else
			Return 0 ;
	end;

Method double CheckPosOpenPL() 
	begin		
		If PositionInfo <> Null and PositionInfo.Count > 0 and PositionInfo.Position[Symbol,AccountToTrade] <> Null then
			Return PositionInfo.Position[Symbol,AccountToTrade].OpenPL {PositionInfo[0].Quantity }
		Else
			Return 0 ;
	end;

Method void LiquidateCurSymbol()
Variables: int iCount;
	begin
		Print("LiquidateCurSymbol--", Symbol, "--", Currenttime);
		If PositionInfo <> Null and PositionInfo.Count > 0 and PositionInfo.Position[Symbol,AccountToTrade] <> Null then
			PositionInfo.Position[Symbol,AccountToTrade].Close() ;
	End ;
		
Method void LiquidateAll()
Variables: int iCount;
	begin		
		For iCount = 0 to PositionInfo.Count 
			Begin 
				if PositionInfo[iCount] <> NULL then
					PositionInfo[iCount].Close();
			End ;
	End ;
	
{--------------------------Trade------------------------------------}	
{ Canceled 9 
  Cancelpending 10 
  Expired 12 
  Filled 8 
  Partiallyfilled 6 
  Partiallyfilledurout 7 
  Queued 5 
  Received 4 
  Rejected 11 
  Sendfailed 3 
  Sending 1 
  Sent 2 
  unsent 0 }

{ Position and Order status
	int PosFlatNoOrder(1),
	int PosFlatEnOrder(2),
	int PosLongNoOrder(3),
	int PosLongExOrder(4),
	int PosShortNoOrder(5),
	int PosShortExOrder(6),
	int PosOrderConflict(7),
	int PosOrderUnknown(-1)
}

Method bool IsOrderWorking(Order ord)
	begin
		if ord <> Null then
			if ord.State = OrderState.queued or ord.State = OrderState.received then
				Return True ;	

		Return false ;
	end;
	
Method int CheckTradingStatus ()
Variables: int cur_pos;
	begin
		cur_pos = CheckPosition() ;
		switch(cur_pos) 
			Begin
				Case 0: 
					if IsOrderWorking(LongEntryOrder) or IsOrderWorking(ShortEntryOrder) then 
						return PosFlatEnOrder 
					Else 
						Return PosFlatNoOrder ;
				Case > 0 : 
					If cur_pos > Pos(TradeSize) then
						Return PosOrderConflict
					else If IsOrderWorking(LongExitOrderSide1) and IsOrderWorking(LongExitOrderSide2) then
						Return PosLongExOrder 
					Else 
						Return PosLongNoOrder ;
				Case < 0 : 
					If cur_pos < Neg(TradeSize) then
						Return PosOrderConflict
					else If IsOrderWorking(ShortExitOrderSide1) and IsOrderWorking(ShortExitOrderSide2) then
						Return PosShortExOrder 
					Else 
						Return PosShortNoOrder ;
			End;
		return PosOrderConflict ;
	end;

Method void IssueEntryLongLimit(double prc)
	begin
		Print("IssueEntryLongLimit--", Symbol, "-- price = ", Numtostr(prc, getDecimals( prc, 5 ))) ;
		EntryBuyLmtTicket.LimitPrice = prc ;
		LongEntryOrder = EntryBuyLmtTicket.Send();
		LongEntryOrder.Updated += LongEntryUpdated ;
	end;

Method void IssueEntryShortLimit(double prc)
	begin
		Print("IssueEntryShortLimit--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 ))) ;
		EntryShortLmtTicket.LimitPrice = prc ;
		ShortEntryOrder = EntryShortLmtTicket.Send();
		ShortEntryOrder.Updated += ShortEntryUpdated ;
	end;

Method void IssueExitLongLimit(double prc, double stp)
	begin
		Print("IssueExitLongLimit--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 )), ", stop = ", Numtostr(stp, getDecimals( stp, 5 ))) ;
		If TradingStatus = PosLongExOrder Then 
			ReplaceExitLongWithLimit(Last)
		Else 
			IssueExitLongBracket(prc, stp) ;		
	end;

Method void IssueExitLongBracket(double prc, double stp)
	begin
		Print("IssueExitLongBracket--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 )), ", stop = ", Numtostr(stp, getDecimals( stp, 5 ))) ;
		LongExitBracket.LimitPrice = prc ;
		LongExitBracket.StopPrice = stp ;
		LongExitOrderSide1 = LongExitBracket.Send() ;
		LongExitOrderSide2 = LongExitOrderSide1.NextSibling ;
		LongExitOrderSide1.Updated += ExitOrderUpdate ;
		LongExitOrderSide2.Updated += ExitOrderUpdate ;
	end;

{ method void replaceExitLongWithLimit: replace sell order for exit with limit price }
method void ReplaceExitLongWithLimit(double prc)
	begin
		if ReplaceLmtTicket = Null then
			ReplaceLmtTicket = ReplaceTicket.Create() ;
		
		ReplaceLmtTicket.Quantity = TradeSize ;
		ReplaceLmtTicket.Type = OrderType.limit ;
		ReplaceLmtTicket.LimitPrice = prc ;	
		
		if LongExitOrderSide1 <> NULL and LongExitOrderSide1.State = OrderState.received
			and LongExitOrderSide1.Type = OrderType.limit then
			LongExitOrderSide1.Replace(ReplaceLmtTicket);
		
		if LongExitOrderSide2 <> NULL and LongExitOrderSide2.State = OrderState.received
			and LongExitOrderSide2.Type = OrderType.limit then
			LongExitOrderSide2.Replace(ReplaceLmtTicket);
		
		Print("replaceExitLongWithLimit--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 ))) ;
	end ;

method int getExitLongWithLimitLife()
Variables:
	int lgExLife;
	begin
		lgExLife = -1 ;
		if LongExitOrderSide1 <> NULL and LongExitOrderSide1.State = OrderState.received
			and LongExitOrderSide1.Type = OrderType.limit then
			lgExLife = MinutesDiff(LongExitOrderSide1.EnteredTime.ELTime, Currenttime) ;
		
		if LongExitOrderSide2 <> NULL and LongExitOrderSide2.State = OrderState.received
			and LongExitOrderSide2.Type = OrderType.limit then
			lgExLife = MinutesDiff(LongExitOrderSide2.EnteredTime.ELTime, Currenttime) ;
		
		Print("ExitLongWithLimitLife--", lgExLife, "-- for ", Symbol, ) ;
		Return lgExLife ;
	end ;
	
Method void IssueExitShortLimit(double prc, double stp)
	begin
		Print("IssueExitShortLimit--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 )) ) ;
		If TradingStatus = PosShortExOrder Then 
			ReplaceExitShortWithLimit(Last)
		Else 
			IssueExitShortBracket(prc, stp) ;		
	end;

Method void IssueExitShortBracket(double prc, double stp)
	begin
		Print("IssueExitShortBracket--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 )), ", stop = ", Numtostr(stp, getDecimals( stp, 5 ))) ;
		ShortExitBracket.LimitPrice = prc ;
		ShortExitBracket.StopPrice = stp ;
		ShortExitOrderSide1 = ShortExitBracket.Send() ;
		ShortExitOrderSide2 = ShortExitOrderSide1.NextSibling ;
		ShortExitOrderSide1.Updated += ExitOrderUpdate ;
		ShortExitOrderSide2.Updated += ExitOrderUpdate ;
		{BarSinceEntryCounter = MaxBarsSinceEntry ;}
	End ;

{ method void replaceExitShortWithLimit: replace buy order for exit with limit price }
method void ReplaceExitShortWithLimit(double prc)
	begin
		if ReplaceLmtTicket = Null then
			ReplaceLmtTicket = ReplaceTicket.Create() ;
		
		ReplaceLmtTicket.Quantity = TradeSize ;
		ReplaceLmtTicket.Type = OrderType.limit ;
		ReplaceLmtTicket.LimitPrice = prc ;	
		
		if ShortExitOrderSide1 <> NULL and ShortExitOrderSide1.State = OrderState.received
			and ShortExitOrderSide1.Type = OrderType.limit then
			ShortExitOrderSide1.Replace(ReplaceLmtTicket);
		
		if ShortExitOrderSide2 <> NULL and ShortExitOrderSide2.State = OrderState.received
			and ShortExitOrderSide2.Type = OrderType.limit then
			ShortExitOrderSide2.Replace(ReplaceLmtTicket);
		
		Print("replaceExitShortWithLimit--", Symbol, "--, price = ", Numtostr(prc, getDecimals( prc, 5 ))) ;
	end ;

method int getExitShortWithLimitLife()
Variables:
	int stExLife;
	begin
		stExLife = -1 ;
		if ShortExitOrderSide1 <> NULL and ShortExitOrderSide1.State = OrderState.received
			and ShortExitOrderSide1.Type = OrderType.limit then
			stExLife = MinutesDiff(ShortExitOrderSide1.EnteredTime.ELTime, Currenttime) ;
		
		if ShortExitOrderSide2 <> NULL and ShortExitOrderSide2.State = OrderState.received
			and ShortExitOrderSide2.Type = OrderType.limit then
			stExLife = MinutesDiff(ShortExitOrderSide2.EnteredTime.ELTime, Currenttime) ;
		
		Print("ExitShortWithLimitLife--", stExLife, "-- for ", Symbol, ) ;
		
		Return stExLife ;
	end ;
	
Method void CancelAllEnOrders()
	begin 
		If LongEntryOrder <> Null and LongEntryOrder.CanCancel() then
			LongEntryOrder.Cancel() ;
		If ShortEntryOrder <> Null and ShortEntryOrder.CanCancel() then 
			ShortEntryOrder.Cancel() ;
	end ;

Method void TradeOnPosFlatNoOrder()
variables: int buy_sell_signal;
	begin
		buy_sell_signal = CheckEntrySignal();
		print("TradeOnPosFlatNoOrder --", Symbol, "--, buy_sell_signal = ", buy_sell_signal) ;
		switch(buy_sell_signal)
			Begin
				Case BuySignal :
					if TradingMode = LongOnly or TradingMode = BothLongShort then
						IssueEntryLongLimit(Last - OneTick*EntryOffsetTicksFromLastTrade) ;
					Break ;
				Case SellSignal :
					if TradingMode = ShortOnly or TradingMode = BothLongShort then
						IssueEntryShortLimit(Last + OneTick*EntryOffsetTicksFromLastTrade) ;
					Break ;
			End ;
	end;

Method void TradeOnPosFlatEnOrder()
Variables:
	int lgOrdLife, int stOrdLife ;
	begin		
		lgOrdLife = 0 ;
		stOrdLife = 0 ;
		print("TradeOnPosFlatEnOrder --", Symbol, "-- Time:", Currenttime);
		If LongEntryOrder <> Null then 
		print(Symbol, ", LongEntryOrder.State=", LongEntryOrder.State.ToString(), "-- LongEntryOrder.EnteredTime=", LongEntryOrder.EnteredTime.ELTime) ;
		If ShortEntryOrder <> Null then
		print(Symbol, ", ShortEntryOrder.State=", ShortEntryOrder.State.ToString(), "-- ShortEntryOrder.EnteredTime=", ShortEntryOrder.EnteredTime.ELTime) ;
		
		If LongEntryOrder <> Null and LongEntryOrder.State <> OrderState.filled then  
			Begin 					
				lgOrdLife = MinutesDiff(LongEntryOrder.EnteredTime.ELTime, Currenttime) ;
				print(Symbol, "-- lgOrdLife=", lgOrdLife, "-- LongEntryOrder.EnteredTime=", LongEntryOrder.EnteredTime.ELTime) ;
			End ;
		If ShortEntryOrder <> Null and ShortEntryOrder.State <> OrderState.filled then 
			Begin 
				stOrdLife = MinutesDiff(ShortEntryOrder.EnteredTime.ELTime, Currenttime) ;
				print(Symbol, "-- stOrdLife=", stOrdLife, "-- ShortEntryOrder.EnteredTime=", ShortEntryOrder.EnteredTime.ELTime) ;
			End ;
		If (lgOrdLife > MaxMinsWaitForEntry and LongEntryOrder.State = OrderState.received )
			Or (stOrdLife > MaxMinsWaitForEntry and ShortEntryOrder.State = OrderState.received ) then 
			Begin
				print("TradeOnPosFlatEnOrder, cancelling --", Symbol, "-- lgOrdLife=", lgOrdLife, "-- stOrdLife=", stOrdLife) ;
				CancelAllEnOrders();
			End ;
	end;
	
Method void TradeOnPosLong()
	begin
		print("TradeOnPosLong --", Symbol, "--") ;
		if CheckExitLongSignal() = SellSignal And (TradingMode = LongOnly or TradingMode = BothLongShort) then
			IssueExitLongLimit(Last + OneTick*EntryOffsetTicksFromLastTrade, Last - OneTick*StopLossOffsetTicks) ;
	end;

Method void TradeOnPosShort()
	begin		
		print("TradeOnPosShort --", Symbol, "--") ;
		if CheckExitShortSignal() = BuySignal And (TradingMode = ShortOnly or TradingMode = BothLongShort) then
			IssueExitShortLimit(Last - OneTick*EntryOffsetTicksFromLastTrade, Last - OneTick*StopLossOffsetTicks) ;					
	end;
	
Method void TradeOnLastBar()
	Begin
		print("tradeOnLastBar------------TradingStatus=", TradingStatus);
		switch(TradingStatus)
			Begin
				Case PosFlatNoOrder :
					TradeOnPosFlatNoOrder();
					Break ;
				Case PosFlatEnOrder :
					TradeOnPosFlatEnOrder();
					Break ;
				Case PosLongNoOrder, PosLongExOrder :
					TradeOnPosLong();
					Break ;
				Case PosShortNoOrder, PosShortExOrder :
					TradeOnPosShort();
					Break ;
			End ;
	End ;
			
{-----------------------------------------}		
	Once(Currentbar = 1)
		Begin
			Print("Time init GZAT_TestFuncW--", Symbol, "--", Currenttime);	
			Init( ) ;
		End;
{Print("checktime: date=" , date, ", weekday=", Dayofweek(date), ", time=", time );}
	if GZF_CheckTradeTime(YYYMMDD_Start, YYYMMDD_End, Weekday_Start , Weekday_End, Timespan_Start ,Timespan_End, currenttime) then 
		Begin
			CurFastTLAngMA = GZF_TLAngMA(Price, NormRatio, FastLength, TLLength);			
			if LastBarOnChart then begin 
				InitLastBarOnChart() ;
				TradeOnLastBar() ;
				{If CurFastTLAngMA < ExtremeBearTLAng
					And Price < SupportP then
						IssueEntryLongLimit(AvgPrice)
				else If CurFastTLAngMA > ExtremeBullTLAng 
					And Price > ResistanceP then
						IssueEntryShortLimit(AvgPrice) ; }
			End ;
		End 
	Else if LastBarOnChart then
		LiquidateCurSymbol() ;
		